#+title: Introduction to Haskell Types
#+author: Peter Jones <pjones@devalot.com>
#+startup: content

* Topics and Goals
  :PROPERTIES:
  :ID:       c4d4eaed-d7c4-4ddb-a5a6-d535603438d6
  :END:
  1. Introduction to algebraic data types
  2. Record syntax, fields, and functions
  3. Product types (constructors with more than one argument)
  4. Sum types (tagged unions)
  5. Polymorphic types (product and sum)
  6. Exploiting the type system
* Introduction to Algebraic Data Types
  - The data keyword
  - Type constructors vs. data constructors
  - Type constructors are used in type signatures
  - Data constructors are used in patterns and code
* Record Syntax, Fields, and Functions
  - Records look sort of like a C struct
  - Fields turn into functions
  - Record update syntax (sucks)
* Product Types
  - Data constructors that have more than one type
  - Records with more than one field are product types
  - Pattern matching to get the fields
* Sum Types
  - Multiple data constructors
  - Canonical example: Bool = False | True
  - Compared to a C enum
  - Pattern matching on all data constructors
* Polymorphic Types
  - The type constructor uses type variables
  - The Maybe and Either types
  - Binary tree example
* Exploiting the Type System
  - Preventing SQL injection attacks
  - Software Transactional Memory
